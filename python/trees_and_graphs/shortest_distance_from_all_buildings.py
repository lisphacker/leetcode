from typing import List, Tuple, Dict, Set
from collections import namedtuple
from math import inf, isinf
from pprint import pprint
from collections import deque

DEBUG = False

def log(o, label=None, *args, **kwargs):
    if DEBUG:
        if label is not None:
            print(label)
            pprint(o)
            print()
        else:
            print(*args, **kwargs)


Node = namedtuple('Node', ['val', 'coord'])

Grid = List[List[int]]
Coord = Tuple[int, int]
Coords = List[Coord]

Graph = Dict[Coord, Set[Coord]]

FREE = 0
BUILDING = 1
OBSTACLE = 2

class Town:
    def __init__(self, grid: Grid) -> None:
        self.grid = grid
        self.Y, self.X = len(self.grid), len(self.grid[0])

        self.graph = self.create_graph()
        self.buildings = self.get_buildings()

        self.distance = [[0] * self.X for _ in range(self.Y)]
        self.reach_count = [[0] * self.X for _ in range(self.Y)]

    def process(self):
        for building in self.buildings:
            self.bfs(building)

        for y, x in self.buildings:
            self.distance[y][x] = inf

        n = len(self.buildings)
        min_dist = inf
        for y in range(self.Y):
            for x in range(self.X):
                if self.reach_count[y][x] == n:
                    d = self.distance[y][x]
                    if d < min_dist:
                        min_dist = d

        return -1 if isinf(min_dist) else min_dist
        
    def bfs(self, start: Coord):
        Q = deque()
        
        y, x = start
        visited = [[False] * self.X for _ in range(self.Y)]
        visited[y][x] = True

        Q.append(start)
        dist = 0

        def visit(x, y):
            if x >= 0 and x < self.X and y >= 0 and y < self.Y and not visited[y][x] and self.grid[y][x] == FREE:
                visited[y][x] = True
                Q.append((y, x))

        while len(Q) > 0:
            l = len(Q)

            for _ in range(l):
                y, x = Q.popleft()

                self.distance[y][x] += dist
                self.reach_count[y][x] += 1

                visit(x - 1, y)
                visit(x + 1, y)
                visit(x, y - 1)
                visit(x, y + 1)

            dist += 1

    def accumulate_distance_to_all(self, start: Coord):
        dist = dict()
        prev = dict()

        Q = set()

        for coord in self.graph:
            y, x = coord
            dist[coord] = inf
            prev[coord] = None
            Q.add(coord)
        dist[start] = 0

        while len(Q) != 0:
            u = None
            u_dist = inf
            for coord in Q:
                if dist[coord] < u_dist:
                    u_dist = dist[coord]
                    u = coord
            if u is None:
                break

            Q.remove(u)

            for v in self.graph[u]:
                y, x = u
                if self.grid[y][x] == FREE or u == start:
                    alt = dist[u] + 1
                else:
                    alt = inf

                if alt < dist[v]:
                    dist[v] = alt
                    prev[v] = u

        for ((y, x), d) in dist.items():
            self.distance[y][x] += d
            if not isinf(d):
                self.reach_count[y][x] += 1

    def get_buildings(self) -> Coords:
        buildings = []
        for y, row in enumerate(self.grid):
            for x, cell in enumerate(row):
                if cell == 1:
                    buildings.append((y, x))
        return buildings

    def create_graph(self) -> Graph:
        graph = dict()
        for y, row in enumerate(self.grid):
            for x, cell in enumerate(row):
                node = (y, x)
                neighbours = set()
                if x > 0 and row[x - 1] != OBSTACLE:
                    neighbours.add((y, x - 1))
                if x < len(row) - 1 and row[x + 1] != OBSTACLE:
                    neighbours.add((y, x + 1))
                if y > 0 and self.grid[y - 1][x] != OBSTACLE:
                    neighbours.add((y - 1, x))
                if y < len(self.grid) - 1 and self.grid[y + 1][x] != OBSTACLE:
                    neighbours.add((y + 1, x))
                graph[node] = neighbours
        return graph
        
    def print(self):
        for row in self.grid:
            s = ''
            for cell in row:
                s += str(cell)
            log(s)

class Solution:
    def shortestDistance(self, grid: Grid) -> int:
        town = Town(grid)

        town.print()
        log(town.grid, label='GRID')
        log(town.graph, label='GRAPH')

        d = town.process()

        log(town.distance, 'ACCDIST')
        log(town.reach_count, 'REACH_COUNT')

        return d

DEBUG = False

import unittest

class Tests(unittest.TestCase):
    def compare(self, input, ref_output):
        self.assertEqual(ref_output, Solution().shortestDistance(input))

    def test_1(self):
        self.compare([[1,0,2,0,1],[0,0,0,0,0],[0,0,1,0,0]], 7)

    def test_2(self):
        self.compare([[1, 2, 0]], -1)

    def test_3(self):
        self.compare([[1,1,1,1,1,0],[0,0,0,0,0,1],[0,1,1,0,0,1],[1,0,0,1,0,1],[1,0,1,0,0,1],[1,0,0,0,0,1],[0,1,1,1,1,0]], 88)

    def test_4(self):
        self.compare([[0,2,0,0,0,2,0,1,2,0,0,0,2,2,0,2,0,0,2,0],[0,2,0,0,2,2,0,2,2,2,2,1,0,0,2,0,0,2,2,2],[0,2,0,0,0,0,2,2,2,2,2,2,1,2,0,0,1,2,0,0],[0,2,0,2,2,0,0,2,2,0,0,0,0,0,2,0,0,0,1,0],[0,0,0,0,0,1,2,0,1,0,2,0,0,0,2,0,2,0,0,2],[2,2,2,0,0,0,0,0,0,0,0,0,2,2,0,1,2,0,0,2],[0,0,2,0,0,2,0,0,0,2,2,0,0,0,0,2,0,2,0,0],[2,0,0,0,2,0,0,0,2,2,0,1,0,0,0,0,2,0,2,2],[0,0,2,2,2,0,2,2,0,0,2,0,0,2,0,0,2,2,2,0],[2,2,2,0,0,0,0,0,2,2,2,2,0,0,0,2,2,2,2,0],[2,0,2,0,1,0,0,2,0,0,0,2,0,0,2,0,2,2,0,0],[0,2,2,2,1,2,0,1,0,1,0,0,2,1,2,0,0,1,0,0],[0,2,2,0,2,2,0,2,1,0,0,0,0,0,2,0,0,0,0,0]],
            -1)

    def test_5(self):
        self.compare([[0,2,0,0,2,2,2,2,2,2,2,0,0,0,0,2,2,1,0,0,2,0,2,0,2,0,0,2,2,2,0,0,2,0,2,0,2,2,2,0,2],[0,0,0,0,0,2,2,0,2,0,0,0,0,0,2,0,0,2,2,0,2,2,2,2,0,0,2,2,0,0,2,2,1,0,0,2,2,0,2,0,0],[0,0,0,0,2,2,0,0,0,0,0,0,2,2,0,2,2,0,0,0,2,2,2,2,0,0,0,0,2,2,0,0,0,0,0,2,0,0,2,2,0],[2,2,0,2,0,0,2,0,0,0,0,0,2,2,2,0,2,2,2,0,0,0,0,0,0,1,2,2,0,0,0,0,2,0,0,2,0,0,0,0,2],[0,0,2,2,0,0,2,1,2,0,0,0,0,2,1,0,2,2,0,2,0,0,0,2,1,0,2,2,0,0,0,2,0,0,0,2,2,0,2,0,0],[0,0,2,2,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,2,2,2,2,2,0,2,2,1,2,0,2,0,0,0,2,0,2,2,0],[2,0,0,0,2,2,0,0,0,2,1,0,2,0,0,0,0,2,0,2,0,2,2,2,0,2,2,2,0,0,0,0,0,0,2,0,0,0,0,0,2],[1,0,2,2,0,0,2,0,0,0,2,0,0,0,2,2,2,2,0,0,0,0,2,0,0,2,0,2,1,2,2,0,0,2,0,0,0,0,0,0,0],[0,2,0,0,0,1,0,0,2,2,0,0,0,0,2,0,0,2,0,2,2,2,0,0,2,2,0,2,2,2,2,0,0,0,0,2,0,2,0,0,2],[0,0,2,2,0,2,2,0,2,0,1,0,0,0,0,0,2,0,0,2,0,2,0,0,0,0,0,0,0,2,2,0,0,0,0,0,2,2,0,0,1],[1,2,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,2,0,0,2,0],[0,1,2,2,2,2,0,2,0,0,2,2,0,0,0,0,0,2,0,2,0,0,0,0,2,0,0,0,0,0,0,2,2,2,0,0,2,2,0,0,0],[2,0,2,0,2,0,0,2,0,0,0,2,0,0,2,2,0,0,0,2,0,0,2,2,2,0,2,2,0,2,2,1,2,0,0,2,0,0,0,2,0],[0,0,2,0,0,0,2,2,2,0,2,2,2,0,0,2,0,0,0,2,1,2,2,0,2,0,2,0,0,2,2,0,0,0,2,2,0,0,0,0,0],[0,0,0,0,0,2,2,0,2,0,0,2,0,2,0,0,0,2,0,0,0,0,0,0,0,1,2,0,0,0,0,1,0,2,0,0,2,0,1,0,0],[1,2,0,2,0,0,0,2,0,2,0,0,0,0,0,2,1,2,0,0,0,0,0,2,0,0,0,0,0,2,2,0,0,0,2,0,0,1,0,2,2],[1,0,0,2,0,2,0,2,0,2,0,0,0,0,1,0,0,0,0,0,2,2,0,2,0,2,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,1,2,2,0,0,2,2,0,0,0,0,0,0,2,0,2,0,2,2,0,1],[2,0,0,1,1,0,1,0,2,0,0,2,1,0,2,0,0,2,2,0,2,0,2,2,0,1,2,0,2,0,0,0,0,0,0,2,0,0,2,0,0],[2,2,0,0,0,2,2,0,2,2,0,0,0,2,0,0,0,2,0,0,2,0,0,2,0,0,0,2,0,0,0,2,2,2,0,2,0,0,2,0,2]],
            -1)

    def test_6(self):
        self.compare([[2,0,0,0,2,0,2,0,2,0,0,0,2,0,0,0,2,0,0,1,0,2,0,0,2,0,0,0,0,0,2,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2],[2,0,2,0,2,0,0,0,2,0,0,0,0,0,2,0,0,0,2,2,2,0,2,1,2,2,0,0,0,1,0,0,0,2,2,0,0,0,0,0,0,2,0,2,0,0,2,0,2,0],[2,0,2,0,0,2,0,1,0,1,2,2,0,0,0,2,2,2,0,2,2,0,0,2,2,0,2,2,2,2,0,0,0,1,0,1,2,0,1,0,2,2,0,0,2,2,0,0,2,0],[0,2,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,2,1,0,0,0,2,0,2,0,0,0,0,2,2,0,2,0,2,2,0,2,0,0,0,0,2,0,2,2,2,0],[0,0,0,2,0,0,0,0,1,0,2,0,0,2,2,0,2,2,0,0,0,0,0,0,2,2,0,0,2,0,0,2,0,2,0,0,2,2,2,0,0,0,0,2,0,0,0,0,0,0],[0,2,1,0,2,2,2,2,0,0,2,0,2,0,0,0,2,0,2,0,0,0,0,2,0,0,2,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2],[1,2,0,0,1,0,0,2,0,0,0,2,0,2,2,0,2,0,2,1,0,0,2,0,0,2,0,0,2,0,0,0,0,2,0,0,2,0,0,2,2,0,0,1,0,2,2,2,0,1],[0,0,2,2,0,2,1,0,0,2,0,0,0,2,2,2,0,0,0,2,0,0,0,2,0,2,0,0,0,0,2,2,0,2,2,1,2,0,2,2,0,0,2,0,2,0,0,0,2,2],[0,0,0,0,0,2,0,0,0,0,0,0,2,2,0,0,2,2,1,0,2,2,0,2,2,0,0,2,2,2,1,0,2,2,0,0,0,0,2,0,0,2,2,0,2,0,0,0,0,0],[0,1,0,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,0,0,0,0,0,2,0,0,2,2,2,2,0,0,0,0,0,1,2,0,2,0,2,0,0,0,0,0,0,2,2,0],[2,2,2,0,2,2,0,0,0,0,0,0,1,0,2,0,2,2,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,2,0,1,2,0,2,0,0,0,2,2,0,0,1,0,2,2],[0,0,0,2,2,2,0,0,2,0,0,0,2,2,2,0,0,0,2,0,0,0,0,0,0,2,2,0,1,2,0,0,2,2,0,2,0,2,0,0,0,0,0,2,2,0,1,2,2,2],[0,2,0,0,0,1,0,0,0,0,2,0,2,2,0,2,2,0,0,0,0,2,0,0,0,2,0,2,2,0,0,0,0,2,0,0,0,0,0,0,0,0,2,2,0,2,0,0,0,0],[0,0,2,0,2,0,0,0,0,1,0,0,1,0,2,2,0,0,0,0,2,0,2,0,2,1,2,0,0,0,2,0,0,0,0,0,0,2,0,0,0,2,0,2,0,2,0,2,2,0],[2,0,2,2,2,0,2,0,2,2,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,2,2,2,2,2,2,0,0,0,1,0,0,0,2,2,2,0,0,0,0,0,2,2],[2,2,0,2,0,2,0,2,0,2,0,0,0,0,0,2,0,0,2,0,2,2,0,2,2,0,2,0,2,0,0,0,2,0,0,2,0,2,0,0,0,0,0,1,2,0,2,2,0,0],[0,0,0,0,0,0,2,2,0,0,2,2,0,0,2,0,2,0,0,2,2,2,0,0,2,0,0,0,2,0,0,0,0,0,0,1,2,2,0,0,0,0,0,2,2,2,0,0,2,0],[2,0,2,0,2,0,2,0,0,2,1,2,0,2,2,2,1,0,0,0,0,0,2,0,0,2,1,2,0,0,2,2,0,0,2,2,2,2,0,0,0,0,2,2,0,0,2,2,2,0],[2,1,2,2,2,2,1,0,0,1,2,2,2,0,0,0,0,2,2,0,0,0,2,0,0,2,0,0,2,0,2,0,1,2,2,0,0,0,2,1,0,0,0,0,0,1,2,2,2,0],[2,0,0,0,2,1,0,1,2,2,2,0,0,0,0,0,0,2,0,2,0,0,2,1,2,2,2,0,0,2,2,0,0,2,2,0,0,0,2,0,0,0,0,2,0,2,2,2,0,0],[0,0,0,0,0,0,2,2,0,0,2,0,0,1,1,2,0,2,2,2,0,0,2,2,2,2,0,2,0,2,0,2,0,2,2,0,0,0,0,0,2,2,0,2,2,0,0,0,2,0],[0,0,0,2,0,2,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,2,0,2,2,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,2,2,0,0,0,0],[2,2,0,0,2,0,2,0,2,0,0,0,0,0,0,0,2,0,2,0,0,2,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,1,2,1],[0,2,0,0,2,2,2,0,0,0,1,0,2,0,2,0,0,0,2,2,2,0,0,0,0,0,2,0,0,0,2,0,2,0,2,2,2,0,0,2,0,0,2,0,2,0,0,0,0,1],[0,0,0,0,0,0,2,0,2,0,2,0,0,2,0,2,2,0,0,0,0,0,2,0,2,0,2,2,2,2,2,0,2,0,0,2,2,0,2,0,2,0,0,2,0,0,1,0,0,2],[0,0,0,2,2,0,0,0,2,0,0,2,0,2,2,2,2,0,0,0,2,0,0,0,0,2,0,0,1,0,0,2,0,0,0,0,2,0,0,2,0,2,2,2,2,0,1,2,2,0],[0,0,2,2,0,0,1,0,0,2,0,0,2,2,0,2,2,2,0,0,0,0,2,0,2,0,0,2,0,1,0,0,2,0,2,2,0,0,2,2,0,2,0,0,0,0,2,0,0,2],[2,2,0,0,2,0,2,2,0,0,0,0,1,0,2,2,0,0,0,0,0,0,0,2,0,0,2,2,0,2,0,0,2,0,0,0,0,0,0,0,2,2,0,2,0,2,0,0,2,2],[0,0,0,0,0,2,0,0,2,0,2,2,2,1,2,2,0,2,2,1,2,2,0,0,2,0,2,0,0,2,1,2,0,2,0,0,0,0,2,0,2,2,2,1,0,2,0,2,0,1],[2,1,2,0,2,0,2,0,0,0,2,0,0,2,2,2,2,2,0,0,0,0,0,2,2,0,0,0,0,0,2,0,2,0,2,2,0,2,2,0,0,0,0,0,0,0,2,0,1,0],[0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,2,0,0,2,0,0,0,2,0,0,0,0,0,2,2,2,0,0,0,2,2,0,2,0,0,2,2,0,0],[0,0,1,2,0,2,2,2,0,2,0,0,0,0,0,0,2,2,0,2,1,0,2,2,0,0,2,0,0,2,0,0,0,2,2,0,0,1,0,0,0,0,0,2,0,0,2,0,0,0],[0,2,2,2,0,2,0,0,0,0,0,1,0,0,2,2,0,0,0,2,2,2,2,2,0,2,0,2,0,2,0,0,2,0,2,0,0,2,0,0,0,1,1,2,2,0,2,0,0,0],[0,0,2,0,0,2,0,0,2,0,0,2,0,0,0,0,2,0,0,0,2,0,0,0,0,2,0,1,0,0,2,0,1,0,0,0,0,2,0,0,0,0,0,2,0,0,1,2,0,2],[2,0,0,0,0,2,0,0,1,2,0,0,0,0,0,2,0,2,0,2,0,0,2,0,2,0,0,0,0,0,0,0,0,0,0,2,0,0,1,0,0,2,0,0,0,1,2,1,0,2],[2,1,2,0,0,0,0,2,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,1,0,0,0,0,2,0,2,0,2,2,2,0,0,2,0,2,0,2,0,0,0,0,2,0],[0,2,0,2,2,0,0,1,1,2,1,2,0,2,0,0,0,2,2,1,0,0,2,2,0,0,0,1,0,2,0,0,2,0,0,1,0,0,0,0,0,1,0,1,0,2,0,0,2,0],[0,2,2,0,0,0,0,2,0,0,0,0,0,0,0,0,2,0,2,2,0,0,2,2,0,0,2,0,2,0,0,1,1,2,2,0,0,0,0,0,2,0,0,0,0,0,0,2,2,0],[0,0,0,0,1,1,0,0,0,0,0,0,0,2,0,0,2,0,2,0,0,0,0,2,0,2,0,2,0,0,2,0,2,2,1,0,2,2,0,1,2,0,0,2,0,0,0,0,0,2]],
            -1)

if __name__ == '__main__':
    unittest.main()
